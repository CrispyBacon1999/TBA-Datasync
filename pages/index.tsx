import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { Button, Card, Dropdown, Header, Segment } from "semantic-ui-react";
import { ToastContainer, toast } from "react-toastify";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
    const [fmsConnection, setFMSConnected] = useState(null);
    const [currentEventLevel, setEventLevel] = useState(2);
    const [uploadedMatchCount, setUploadedMatchCount] = useState(0);
    const [uploadedMatchTime, setUploadedMatchTime] = useState<Date | null>(
        null
    );

    const [uploadTimeout, setUploadTimeout] = useState<NodeJS.Timeout | null>(
        null
    );

    const [currentlyUploading, setCurrentlyUploading] = useState(false);

    const checkFMSConnection = async () => {
        setFMSConnected(null);
        const result = await fetch("/api/fms").then((res) => res.json());
        console.log(result);
        setFMSConnected(result.fmsConnected);
    };

    useEffect(() => {
        checkFMSConnection();
    }, []);

    const checkForMatches = async () => {
        if (uploadTimeout !== null) {
            clearTimeout(uploadTimeout);
        }
        setCurrentlyUploading(true);
        try {
            const data = await fetch(
                `/api/match/upload?levelParam=${currentEventLevel}`,
                { method: "POST" }
            ).then((res) => res.json());
            if (currentEventLevel === 2) {
                fetch("/api/event/rankings").then((res) => res.json());
            }
            setCurrentlyUploading(false);
            console.log(data);
            setUploadedMatchCount(data.uploadCount);
            setUploadedMatchTime(new Date());
            // Wait 10 minutes, then call it again.
            const t = setTimeout(checkForMatches, 60 * 5 * 1000);
            setUploadTimeout(t);
        } catch (err) {
            console.log(err);
            setCurrentlyUploading(false);
            toast("Error uploading to TOA. Checking FMS connection.");
            checkFMSConnection();
        }
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>TBA Datasync</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <ToastContainer />
            <main className={styles.main}>
                <Header>TBA Datasync</Header>
                <Segment>
                    <Header>Event State</Header>
                    <Button
                        onClick={checkFMSConnection}
                        color={
                            fmsConnection === null
                                ? "grey"
                                : fmsConnection
                                ? "green"
                                : "red"
                        }
                    >
                        Check FMS Connection
                    </Button>
                    <Dropdown
                        selection
                        button
                        options={[
                            {
                                key: "Test",
                                text: "Test",
                                value: 0,
                            },
                            {
                                key: "Practice",
                                text: "Practice",
                                value: 1,
                            },
                            {
                                key: "Qualifications",
                                text: "Qualifications",
                                value: 2,
                            },
                            {
                                key: "Eliminations",
                                text: "Eliminations",
                                value: 3,
                            },
                        ]}
                        value={currentEventLevel}
                        onChange={(e, { value }) => {
                            setEventLevel(value as number);
                        }}
                    ></Dropdown>
                    <Button as="a" href="/teams">
                        Set Team List
                    </Button>
                </Segment>
                <Segment>
                    <Header>Match flow</Header>
                    <Button
                        color="black"
                        disabled={currentlyUploading}
                        loading={currentlyUploading}
                        onClick={checkForMatches}
                    >
                        Upload Matches
                    </Button>
                    {uploadedMatchTime !== null ? (
                        <Card>
                            <Card.Content>
                                Uploaded {uploadedMatchCount} match
                                {uploadedMatchCount === 1 ? "" : "es"} at{" "}
                                {uploadedMatchTime.toLocaleTimeString()}
                            </Card.Content>
                        </Card>
                    ) : null}
                </Segment>
            </main>
        </div>
    );
};

export default Home;
